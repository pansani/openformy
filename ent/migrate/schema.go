// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "question_answers", Type: field.TypeInt},
		{Name: "response_answers", Type: field.TypeInt},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answers_questions_answers",
				Columns:    []*schema.Column{AnswersColumns[3]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "answers_responses_answers",
				Columns:    []*schema.Column{AnswersColumns[4]},
				RefColumns: []*schema.Column{ResponsesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FormsColumns holds the columns for the "forms" table.
	FormsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "published", Type: field.TypeBool, Default: false},
		{Name: "slug", Type: field.TypeString},
		{Name: "display_mode", Type: field.TypeEnum, Enums: []string{"traditional", "conversational"}, Default: "traditional"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// FormsTable holds the schema information for the "forms" table.
	FormsTable = &schema.Table{
		Name:       "forms",
		Columns:    FormsColumns,
		PrimaryKey: []*schema.Column{FormsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "forms_users_forms",
				Columns:    []*schema.Column{FormsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "form_user_id_slug",
				Unique:  true,
				Columns: []*schema.Column{FormsColumns[8], FormsColumns[4]},
			},
		},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "queue", Type: field.TypeString},
		{Name: "payload", Type: field.TypeJSON},
		{Name: "attempts", Type: field.TypeInt, Default: 0},
		{Name: "max_attempts", Type: field.TypeInt, Default: 3},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "completed", "failed"}, Default: "pending"},
		{Name: "error", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "processed_at", Type: field.TypeTime, Nullable: true},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "job_queue_status",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[1], JobsColumns[5]},
			},
			{
				Name:    "job_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[7]},
			},
		},
	}
	// PasswordTokensColumns holds the columns for the "password_tokens" table.
	PasswordTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// PasswordTokensTable holds the schema information for the "password_tokens" table.
	PasswordTokensTable = &schema.Table{
		Name:       "password_tokens",
		Columns:    PasswordTokensColumns,
		PrimaryKey: []*schema.Column{PasswordTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "password_tokens_users_user",
				Columns:    []*schema.Column{PasswordTokensColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentCustomersColumns holds the columns for the "payment_customers" table.
	PaymentCustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provider_customer_id", Type: field.TypeString},
		{Name: "provider", Type: field.TypeString, Default: "stripe"},
		{Name: "email", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// PaymentCustomersTable holds the schema information for the "payment_customers" table.
	PaymentCustomersTable = &schema.Table{
		Name:       "payment_customers",
		Columns:    PaymentCustomersColumns,
		PrimaryKey: []*schema.Column{PaymentCustomersColumns[0]},
	}
	// PaymentIntentsColumns holds the columns for the "payment_intents" table.
	PaymentIntentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provider_payment_intent_id", Type: field.TypeString, Unique: true},
		{Name: "provider", Type: field.TypeString, Default: "stripe"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"}, Default: "requires_payment_method"},
		{Name: "amount", Type: field.TypeInt64},
		{Name: "currency", Type: field.TypeString, Default: "usd"},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "client_secret", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "payment_customer_payment_intents", Type: field.TypeInt},
	}
	// PaymentIntentsTable holds the schema information for the "payment_intents" table.
	PaymentIntentsTable = &schema.Table{
		Name:       "payment_intents",
		Columns:    PaymentIntentsColumns,
		PrimaryKey: []*schema.Column{PaymentIntentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_intents_payment_customers_payment_intents",
				Columns:    []*schema.Column{PaymentIntentsColumns[11]},
				RefColumns: []*schema.Column{PaymentCustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentMethodsColumns holds the columns for the "payment_methods" table.
	PaymentMethodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provider_payment_method_id", Type: field.TypeString, Unique: true},
		{Name: "provider", Type: field.TypeString, Default: "stripe"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"card", "bank_account", "wallet"}, Default: "card"},
		{Name: "last_four", Type: field.TypeString, Nullable: true},
		{Name: "brand", Type: field.TypeString, Nullable: true},
		{Name: "exp_month", Type: field.TypeInt, Nullable: true},
		{Name: "exp_year", Type: field.TypeInt, Nullable: true},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "payment_customer_payment_methods", Type: field.TypeInt},
	}
	// PaymentMethodsTable holds the schema information for the "payment_methods" table.
	PaymentMethodsTable = &schema.Table{
		Name:       "payment_methods",
		Columns:    PaymentMethodsColumns,
		PrimaryKey: []*schema.Column{PaymentMethodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_methods_payment_customers_payment_methods",
				Columns:    []*schema.Column{PaymentMethodsColumns[12]},
				RefColumns: []*schema.Column{PaymentCustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"text", "short-text", "long-text", "email", "number", "phone", "url", "textarea", "date", "time", "date-range", "file", "signature", "dropdown", "radio", "checkbox", "multi-select", "picture-choice", "yesno", "rating", "opinion-scale", "ranking", "matrix", "statement", "legal", "hidden", "multi-input"}, Default: "text"},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "placeholder", Type: field.TypeString, Nullable: true},
		{Name: "required", Type: field.TypeBool, Default: false},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "options", Type: field.TypeJSON, Nullable: true},
		{Name: "validation", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "form_questions", Type: field.TypeInt},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_forms_questions",
				Columns:    []*schema.Column{QuestionsColumns[11]},
				RefColumns: []*schema.Column{FormsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "question_order",
				Unique:  false,
				Columns: []*schema.Column{QuestionsColumns[6]},
			},
		},
	}
	// ResponsesColumns holds the columns for the "responses" table.
	ResponsesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "submitted_at", Type: field.TypeTime},
		{Name: "completed", Type: field.TypeBool, Default: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "form_responses", Type: field.TypeInt},
		{Name: "user_responses", Type: field.TypeInt, Nullable: true},
	}
	// ResponsesTable holds the schema information for the "responses" table.
	ResponsesTable = &schema.Table{
		Name:       "responses",
		Columns:    ResponsesColumns,
		PrimaryKey: []*schema.Column{ResponsesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "responses_forms_responses",
				Columns:    []*schema.Column{ResponsesColumns[5]},
				RefColumns: []*schema.Column{FormsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "responses_users_responses",
				Columns:    []*schema.Column{ResponsesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "response_submitted_at",
				Unique:  false,
				Columns: []*schema.Column{ResponsesColumns[1]},
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provider_subscription_id", Type: field.TypeString, Unique: true},
		{Name: "provider", Type: field.TypeString, Default: "stripe"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"}, Default: "incomplete"},
		{Name: "price_id", Type: field.TypeString},
		{Name: "amount", Type: field.TypeInt64},
		{Name: "currency", Type: field.TypeString, Default: "usd"},
		{Name: "interval", Type: field.TypeEnum, Enums: []string{"day", "week", "month", "year"}},
		{Name: "interval_count", Type: field.TypeInt, Default: 1},
		{Name: "current_period_start", Type: field.TypeTime, Nullable: true},
		{Name: "current_period_end", Type: field.TypeTime, Nullable: true},
		{Name: "trial_start", Type: field.TypeTime, Nullable: true},
		{Name: "trial_end", Type: field.TypeTime, Nullable: true},
		{Name: "canceled_at", Type: field.TypeTime, Nullable: true},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "payment_customer_subscriptions", Type: field.TypeInt},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_payment_customers_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[18]},
				RefColumns: []*schema.Column{PaymentCustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "company_name", Type: field.TypeString, Nullable: true},
		{Name: "verified", Type: field.TypeBool, Default: false},
		{Name: "admin", Type: field.TypeBool, Default: false},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "brand_button_color", Type: field.TypeString, Nullable: true},
		{Name: "brand_background_color", Type: field.TypeString, Nullable: true},
		{Name: "brand_text_color", Type: field.TypeString, Nullable: true},
		{Name: "brand_colors_status", Type: field.TypeEnum, Nullable: true, Enums: []string{"pending", "processing", "completed", "failed"}},
		{Name: "logo", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "payment_customer_user", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_payment_customers_user",
				Columns:    []*schema.Column{UsersColumns[15]},
				RefColumns: []*schema.Column{PaymentCustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		FormsTable,
		JobsTable,
		PasswordTokensTable,
		PaymentCustomersTable,
		PaymentIntentsTable,
		PaymentMethodsTable,
		QuestionsTable,
		ResponsesTable,
		SubscriptionsTable,
		UsersTable,
	}
)

func init() {
	AnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	AnswersTable.ForeignKeys[1].RefTable = ResponsesTable
	FormsTable.ForeignKeys[0].RefTable = UsersTable
	PasswordTokensTable.ForeignKeys[0].RefTable = UsersTable
	PaymentIntentsTable.ForeignKeys[0].RefTable = PaymentCustomersTable
	PaymentMethodsTable.ForeignKeys[0].RefTable = PaymentCustomersTable
	QuestionsTable.ForeignKeys[0].RefTable = FormsTable
	ResponsesTable.ForeignKeys[0].RefTable = FormsTable
	ResponsesTable.ForeignKeys[1].RefTable = UsersTable
	SubscriptionsTable.ForeignKeys[0].RefTable = PaymentCustomersTable
	UsersTable.ForeignKeys[0].RefTable = PaymentCustomersTable
}
