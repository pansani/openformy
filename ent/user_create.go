// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/form"
	"github.com/occult/pagode/ent/passwordtoken"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/response"
	"github.com/occult/pagode/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetUsername(*s)
	}
	return uc
}

// SetCompanyName sets the "company_name" field.
func (uc *UserCreate) SetCompanyName(s string) *UserCreate {
	uc.mutation.SetCompanyName(s)
	return uc
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableCompanyName(s *string) *UserCreate {
	if s != nil {
		uc.SetCompanyName(*s)
	}
	return uc
}

// SetVerified sets the "verified" field.
func (uc *UserCreate) SetVerified(b bool) *UserCreate {
	uc.mutation.SetVerified(b)
	return uc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetVerified(*b)
	}
	return uc
}

// SetAdmin sets the "admin" field.
func (uc *UserCreate) SetAdmin(b bool) *UserCreate {
	uc.mutation.SetAdmin(b)
	return uc
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetAdmin(*b)
	}
	return uc
}

// SetWebsite sets the "website" field.
func (uc *UserCreate) SetWebsite(s string) *UserCreate {
	uc.mutation.SetWebsite(s)
	return uc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uc *UserCreate) SetNillableWebsite(s *string) *UserCreate {
	if s != nil {
		uc.SetWebsite(*s)
	}
	return uc
}

// SetBrandButtonColor sets the "brand_button_color" field.
func (uc *UserCreate) SetBrandButtonColor(s string) *UserCreate {
	uc.mutation.SetBrandButtonColor(s)
	return uc
}

// SetNillableBrandButtonColor sets the "brand_button_color" field if the given value is not nil.
func (uc *UserCreate) SetNillableBrandButtonColor(s *string) *UserCreate {
	if s != nil {
		uc.SetBrandButtonColor(*s)
	}
	return uc
}

// SetBrandBackgroundColor sets the "brand_background_color" field.
func (uc *UserCreate) SetBrandBackgroundColor(s string) *UserCreate {
	uc.mutation.SetBrandBackgroundColor(s)
	return uc
}

// SetNillableBrandBackgroundColor sets the "brand_background_color" field if the given value is not nil.
func (uc *UserCreate) SetNillableBrandBackgroundColor(s *string) *UserCreate {
	if s != nil {
		uc.SetBrandBackgroundColor(*s)
	}
	return uc
}

// SetBrandTextColor sets the "brand_text_color" field.
func (uc *UserCreate) SetBrandTextColor(s string) *UserCreate {
	uc.mutation.SetBrandTextColor(s)
	return uc
}

// SetNillableBrandTextColor sets the "brand_text_color" field if the given value is not nil.
func (uc *UserCreate) SetNillableBrandTextColor(s *string) *UserCreate {
	if s != nil {
		uc.SetBrandTextColor(*s)
	}
	return uc
}

// SetBrandColorsStatus sets the "brand_colors_status" field.
func (uc *UserCreate) SetBrandColorsStatus(ucs user.BrandColorsStatus) *UserCreate {
	uc.mutation.SetBrandColorsStatus(ucs)
	return uc
}

// SetNillableBrandColorsStatus sets the "brand_colors_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableBrandColorsStatus(ucs *user.BrandColorsStatus) *UserCreate {
	if ucs != nil {
		uc.SetBrandColorsStatus(*ucs)
	}
	return uc
}

// SetLogo sets the "logo" field.
func (uc *UserCreate) SetLogo(s string) *UserCreate {
	uc.mutation.SetLogo(s)
	return uc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (uc *UserCreate) SetNillableLogo(s *string) *UserCreate {
	if s != nil {
		uc.SetLogo(*s)
	}
	return uc
}

// SetLanguage sets the "language" field.
func (uc *UserCreate) SetLanguage(u user.Language) *UserCreate {
	uc.mutation.SetLanguage(u)
	return uc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uc *UserCreate) SetNillableLanguage(u *user.Language) *UserCreate {
	if u != nil {
		uc.SetLanguage(*u)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// AddOwnerIDs adds the "owner" edge to the PasswordToken entity by IDs.
func (uc *UserCreate) AddOwnerIDs(ids ...int) *UserCreate {
	uc.mutation.AddOwnerIDs(ids...)
	return uc
}

// AddOwner adds the "owner" edges to the PasswordToken entity.
func (uc *UserCreate) AddOwner(p ...*PasswordToken) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddOwnerIDs(ids...)
}

// SetPaymentCustomerID sets the "payment_customer" edge to the PaymentCustomer entity by ID.
func (uc *UserCreate) SetPaymentCustomerID(id int) *UserCreate {
	uc.mutation.SetPaymentCustomerID(id)
	return uc
}

// SetNillablePaymentCustomerID sets the "payment_customer" edge to the PaymentCustomer entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillablePaymentCustomerID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetPaymentCustomerID(*id)
	}
	return uc
}

// SetPaymentCustomer sets the "payment_customer" edge to the PaymentCustomer entity.
func (uc *UserCreate) SetPaymentCustomer(p *PaymentCustomer) *UserCreate {
	return uc.SetPaymentCustomerID(p.ID)
}

// AddFormIDs adds the "forms" edge to the Form entity by IDs.
func (uc *UserCreate) AddFormIDs(ids ...int) *UserCreate {
	uc.mutation.AddFormIDs(ids...)
	return uc
}

// AddForms adds the "forms" edges to the Form entity.
func (uc *UserCreate) AddForms(f ...*Form) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddFormIDs(ids...)
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (uc *UserCreate) AddResponseIDs(ids ...int) *UserCreate {
	uc.mutation.AddResponseIDs(ids...)
	return uc
}

// AddResponses adds the "responses" edges to the Response entity.
func (uc *UserCreate) AddResponses(r ...*Response) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddResponseIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.Verified(); !ok {
		v := user.DefaultVerified
		uc.mutation.SetVerified(v)
	}
	if _, ok := uc.mutation.Admin(); !ok {
		v := user.DefaultAdmin
		uc.mutation.SetAdmin(v)
	}
	if _, ok := uc.mutation.Language(); !ok {
		v := user.DefaultLanguage
		uc.mutation.SetLanguage(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`ent: missing required field "User.verified"`)}
	}
	if _, ok := uc.mutation.Admin(); !ok {
		return &ValidationError{Name: "admin", err: errors.New(`ent: missing required field "User.admin"`)}
	}
	if v, ok := uc.mutation.BrandColorsStatus(); ok {
		if err := user.BrandColorsStatusValidator(v); err != nil {
			return &ValidationError{Name: "brand_colors_status", err: fmt.Errorf(`ent: validator failed for field "User.brand_colors_status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "User.language"`)}
	}
	if v, ok := uc.mutation.Language(); ok {
		if err := user.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "User.language": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.CompanyName(); ok {
		_spec.SetField(user.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := uc.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := uc.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
		_node.Admin = value
	}
	if value, ok := uc.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := uc.mutation.BrandButtonColor(); ok {
		_spec.SetField(user.FieldBrandButtonColor, field.TypeString, value)
		_node.BrandButtonColor = value
	}
	if value, ok := uc.mutation.BrandBackgroundColor(); ok {
		_spec.SetField(user.FieldBrandBackgroundColor, field.TypeString, value)
		_node.BrandBackgroundColor = value
	}
	if value, ok := uc.mutation.BrandTextColor(); ok {
		_spec.SetField(user.FieldBrandTextColor, field.TypeString, value)
		_node.BrandTextColor = value
	}
	if value, ok := uc.mutation.BrandColorsStatus(); ok {
		_spec.SetField(user.FieldBrandColorsStatus, field.TypeEnum, value)
		_node.BrandColorsStatus = value
	}
	if value, ok := uc.mutation.Logo(); ok {
		_spec.SetField(user.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := uc.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeEnum, value)
		_node.Language = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := uc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PaymentCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.PaymentCustomerTable,
			Columns: []string{user.PaymentCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_customer_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FormsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormsTable,
			Columns: []string{user.FormsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
