// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldBrandButtonColor holds the string denoting the brand_button_color field in the database.
	FieldBrandButtonColor = "brand_button_color"
	// FieldBrandBackgroundColor holds the string denoting the brand_background_color field in the database.
	FieldBrandBackgroundColor = "brand_background_color"
	// FieldBrandTextColor holds the string denoting the brand_text_color field in the database.
	FieldBrandTextColor = "brand_text_color"
	// FieldBrandColorsStatus holds the string denoting the brand_colors_status field in the database.
	FieldBrandColorsStatus = "brand_colors_status"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgePaymentCustomer holds the string denoting the payment_customer edge name in mutations.
	EdgePaymentCustomer = "payment_customer"
	// EdgeForms holds the string denoting the forms edge name in mutations.
	EdgeForms = "forms"
	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "password_tokens"
	// OwnerInverseTable is the table name for the PasswordToken entity.
	// It exists in this package in order to avoid circular dependency with the "passwordtoken" package.
	OwnerInverseTable = "password_tokens"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
	// PaymentCustomerTable is the table that holds the payment_customer relation/edge.
	PaymentCustomerTable = "users"
	// PaymentCustomerInverseTable is the table name for the PaymentCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "paymentcustomer" package.
	PaymentCustomerInverseTable = "payment_customers"
	// PaymentCustomerColumn is the table column denoting the payment_customer relation/edge.
	PaymentCustomerColumn = "payment_customer_user"
	// FormsTable is the table that holds the forms relation/edge.
	FormsTable = "forms"
	// FormsInverseTable is the table name for the Form entity.
	// It exists in this package in order to avoid circular dependency with the "form" package.
	FormsInverseTable = "forms"
	// FormsColumn is the table column denoting the forms relation/edge.
	FormsColumn = "user_id"
	// ResponsesTable is the table that holds the responses relation/edge.
	ResponsesTable = "responses"
	// ResponsesInverseTable is the table name for the Response entity.
	// It exists in this package in order to avoid circular dependency with the "response" package.
	ResponsesInverseTable = "responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "user_responses"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldUsername,
	FieldCompanyName,
	FieldVerified,
	FieldAdmin,
	FieldWebsite,
	FieldBrandButtonColor,
	FieldBrandBackgroundColor,
	FieldBrandTextColor,
	FieldBrandColorsStatus,
	FieldLogo,
	FieldLanguage,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_customer_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/occult/pagode/ent/runtime"
var (
	Hooks [1]ent.Hook
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultVerified holds the default value on creation for the "verified" field.
	DefaultVerified bool
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// BrandColorsStatus defines the type for the "brand_colors_status" enum field.
type BrandColorsStatus string

// BrandColorsStatus values.
const (
	BrandColorsStatusPending    BrandColorsStatus = "pending"
	BrandColorsStatusProcessing BrandColorsStatus = "processing"
	BrandColorsStatusCompleted  BrandColorsStatus = "completed"
	BrandColorsStatusFailed     BrandColorsStatus = "failed"
)

func (bcs BrandColorsStatus) String() string {
	return string(bcs)
}

// BrandColorsStatusValidator is a validator for the "brand_colors_status" field enum values. It is called by the builders before save.
func BrandColorsStatusValidator(bcs BrandColorsStatus) error {
	switch bcs {
	case BrandColorsStatusPending, BrandColorsStatusProcessing, BrandColorsStatusCompleted, BrandColorsStatusFailed:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for brand_colors_status field: %q", bcs)
	}
}

// Language defines the type for the "language" enum field.
type Language string

// LanguageEn is the default value of the Language enum.
const DefaultLanguage = LanguageEn

// Language values.
const (
	LanguageEn Language = "en"
	LanguagePt Language = "pt"
	LanguageEs Language = "es"
	LanguageFr Language = "fr"
)

func (l Language) String() string {
	return string(l)
}

// LanguageValidator is a validator for the "language" field enum values. It is called by the builders before save.
func LanguageValidator(l Language) error {
	switch l {
	case LanguageEn, LanguagePt, LanguageEs, LanguageFr:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for language field: %q", l)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByVerified orders the results by the verified field.
func ByVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerified, opts...).ToFunc()
}

// ByAdmin orders the results by the admin field.
func ByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmin, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByBrandButtonColor orders the results by the brand_button_color field.
func ByBrandButtonColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandButtonColor, opts...).ToFunc()
}

// ByBrandBackgroundColor orders the results by the brand_background_color field.
func ByBrandBackgroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandBackgroundColor, opts...).ToFunc()
}

// ByBrandTextColor orders the results by the brand_text_color field.
func ByBrandTextColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandTextColor, opts...).ToFunc()
}

// ByBrandColorsStatus orders the results by the brand_colors_status field.
func ByBrandColorsStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandColorsStatus, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentCustomerField orders the results by payment_customer field.
func ByPaymentCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByFormsCount orders the results by forms count.
func ByFormsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFormsStep(), opts...)
	}
}

// ByForms orders the results by forms terms.
func ByForms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResponsesCount orders the results by responses count.
func ByResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResponsesStep(), opts...)
	}
}

// ByResponses orders the results by responses terms.
func ByResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
	)
}
func newPaymentCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentCustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaymentCustomerTable, PaymentCustomerColumn),
	)
}
func newFormsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FormsTable, FormsColumn),
	)
}
func newResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
	)
}
