// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompanyName, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerified, v))
}

// Admin applies equality check predicate on the "admin" field. It's identical to AdminEQ.
func Admin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAdmin, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebsite, v))
}

// BrandButtonColor applies equality check predicate on the "brand_button_color" field. It's identical to BrandButtonColorEQ.
func BrandButtonColor(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandButtonColor, v))
}

// BrandBackgroundColor applies equality check predicate on the "brand_background_color" field. It's identical to BrandBackgroundColorEQ.
func BrandBackgroundColor(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandBackgroundColor, v))
}

// BrandTextColor applies equality check predicate on the "brand_text_color" field. It's identical to BrandTextColorEQ.
func BrandTextColor(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandTextColor, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCompanyName))
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCompanyName))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCompanyName, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerified, v))
}

// AdminEQ applies the EQ predicate on the "admin" field.
func AdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAdmin, v))
}

// AdminNEQ applies the NEQ predicate on the "admin" field.
func AdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAdmin, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWebsite, v))
}

// BrandButtonColorEQ applies the EQ predicate on the "brand_button_color" field.
func BrandButtonColorEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandButtonColor, v))
}

// BrandButtonColorNEQ applies the NEQ predicate on the "brand_button_color" field.
func BrandButtonColorNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBrandButtonColor, v))
}

// BrandButtonColorIn applies the In predicate on the "brand_button_color" field.
func BrandButtonColorIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBrandButtonColor, vs...))
}

// BrandButtonColorNotIn applies the NotIn predicate on the "brand_button_color" field.
func BrandButtonColorNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBrandButtonColor, vs...))
}

// BrandButtonColorGT applies the GT predicate on the "brand_button_color" field.
func BrandButtonColorGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBrandButtonColor, v))
}

// BrandButtonColorGTE applies the GTE predicate on the "brand_button_color" field.
func BrandButtonColorGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBrandButtonColor, v))
}

// BrandButtonColorLT applies the LT predicate on the "brand_button_color" field.
func BrandButtonColorLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBrandButtonColor, v))
}

// BrandButtonColorLTE applies the LTE predicate on the "brand_button_color" field.
func BrandButtonColorLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBrandButtonColor, v))
}

// BrandButtonColorContains applies the Contains predicate on the "brand_button_color" field.
func BrandButtonColorContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBrandButtonColor, v))
}

// BrandButtonColorHasPrefix applies the HasPrefix predicate on the "brand_button_color" field.
func BrandButtonColorHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBrandButtonColor, v))
}

// BrandButtonColorHasSuffix applies the HasSuffix predicate on the "brand_button_color" field.
func BrandButtonColorHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBrandButtonColor, v))
}

// BrandButtonColorIsNil applies the IsNil predicate on the "brand_button_color" field.
func BrandButtonColorIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBrandButtonColor))
}

// BrandButtonColorNotNil applies the NotNil predicate on the "brand_button_color" field.
func BrandButtonColorNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBrandButtonColor))
}

// BrandButtonColorEqualFold applies the EqualFold predicate on the "brand_button_color" field.
func BrandButtonColorEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBrandButtonColor, v))
}

// BrandButtonColorContainsFold applies the ContainsFold predicate on the "brand_button_color" field.
func BrandButtonColorContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBrandButtonColor, v))
}

// BrandBackgroundColorEQ applies the EQ predicate on the "brand_background_color" field.
func BrandBackgroundColorEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorNEQ applies the NEQ predicate on the "brand_background_color" field.
func BrandBackgroundColorNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorIn applies the In predicate on the "brand_background_color" field.
func BrandBackgroundColorIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBrandBackgroundColor, vs...))
}

// BrandBackgroundColorNotIn applies the NotIn predicate on the "brand_background_color" field.
func BrandBackgroundColorNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBrandBackgroundColor, vs...))
}

// BrandBackgroundColorGT applies the GT predicate on the "brand_background_color" field.
func BrandBackgroundColorGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorGTE applies the GTE predicate on the "brand_background_color" field.
func BrandBackgroundColorGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorLT applies the LT predicate on the "brand_background_color" field.
func BrandBackgroundColorLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorLTE applies the LTE predicate on the "brand_background_color" field.
func BrandBackgroundColorLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorContains applies the Contains predicate on the "brand_background_color" field.
func BrandBackgroundColorContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorHasPrefix applies the HasPrefix predicate on the "brand_background_color" field.
func BrandBackgroundColorHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorHasSuffix applies the HasSuffix predicate on the "brand_background_color" field.
func BrandBackgroundColorHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorIsNil applies the IsNil predicate on the "brand_background_color" field.
func BrandBackgroundColorIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBrandBackgroundColor))
}

// BrandBackgroundColorNotNil applies the NotNil predicate on the "brand_background_color" field.
func BrandBackgroundColorNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBrandBackgroundColor))
}

// BrandBackgroundColorEqualFold applies the EqualFold predicate on the "brand_background_color" field.
func BrandBackgroundColorEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBrandBackgroundColor, v))
}

// BrandBackgroundColorContainsFold applies the ContainsFold predicate on the "brand_background_color" field.
func BrandBackgroundColorContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBrandBackgroundColor, v))
}

// BrandTextColorEQ applies the EQ predicate on the "brand_text_color" field.
func BrandTextColorEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandTextColor, v))
}

// BrandTextColorNEQ applies the NEQ predicate on the "brand_text_color" field.
func BrandTextColorNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBrandTextColor, v))
}

// BrandTextColorIn applies the In predicate on the "brand_text_color" field.
func BrandTextColorIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBrandTextColor, vs...))
}

// BrandTextColorNotIn applies the NotIn predicate on the "brand_text_color" field.
func BrandTextColorNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBrandTextColor, vs...))
}

// BrandTextColorGT applies the GT predicate on the "brand_text_color" field.
func BrandTextColorGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBrandTextColor, v))
}

// BrandTextColorGTE applies the GTE predicate on the "brand_text_color" field.
func BrandTextColorGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBrandTextColor, v))
}

// BrandTextColorLT applies the LT predicate on the "brand_text_color" field.
func BrandTextColorLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBrandTextColor, v))
}

// BrandTextColorLTE applies the LTE predicate on the "brand_text_color" field.
func BrandTextColorLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBrandTextColor, v))
}

// BrandTextColorContains applies the Contains predicate on the "brand_text_color" field.
func BrandTextColorContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBrandTextColor, v))
}

// BrandTextColorHasPrefix applies the HasPrefix predicate on the "brand_text_color" field.
func BrandTextColorHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBrandTextColor, v))
}

// BrandTextColorHasSuffix applies the HasSuffix predicate on the "brand_text_color" field.
func BrandTextColorHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBrandTextColor, v))
}

// BrandTextColorIsNil applies the IsNil predicate on the "brand_text_color" field.
func BrandTextColorIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBrandTextColor))
}

// BrandTextColorNotNil applies the NotNil predicate on the "brand_text_color" field.
func BrandTextColorNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBrandTextColor))
}

// BrandTextColorEqualFold applies the EqualFold predicate on the "brand_text_color" field.
func BrandTextColorEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBrandTextColor, v))
}

// BrandTextColorContainsFold applies the ContainsFold predicate on the "brand_text_color" field.
func BrandTextColorContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBrandTextColor, v))
}

// BrandColorsStatusEQ applies the EQ predicate on the "brand_colors_status" field.
func BrandColorsStatusEQ(v BrandColorsStatus) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBrandColorsStatus, v))
}

// BrandColorsStatusNEQ applies the NEQ predicate on the "brand_colors_status" field.
func BrandColorsStatusNEQ(v BrandColorsStatus) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBrandColorsStatus, v))
}

// BrandColorsStatusIn applies the In predicate on the "brand_colors_status" field.
func BrandColorsStatusIn(vs ...BrandColorsStatus) predicate.User {
	return predicate.User(sql.FieldIn(FieldBrandColorsStatus, vs...))
}

// BrandColorsStatusNotIn applies the NotIn predicate on the "brand_colors_status" field.
func BrandColorsStatusNotIn(vs ...BrandColorsStatus) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBrandColorsStatus, vs...))
}

// BrandColorsStatusIsNil applies the IsNil predicate on the "brand_colors_status" field.
func BrandColorsStatusIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBrandColorsStatus))
}

// BrandColorsStatusNotNil applies the NotNil predicate on the "brand_colors_status" field.
func BrandColorsStatusNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBrandColorsStatus))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLogo, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v Language) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v Language) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...Language) predicate.User {
	return predicate.User(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...Language) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLanguage, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.PasswordToken) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentCustomer applies the HasEdge predicate on the "payment_customer" edge.
func HasPaymentCustomer() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PaymentCustomerTable, PaymentCustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentCustomerWith applies the HasEdge predicate on the "payment_customer" edge with a given conditions (other predicates).
func HasPaymentCustomerWith(preds ...predicate.PaymentCustomer) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPaymentCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForms applies the HasEdge predicate on the "forms" edge.
func HasForms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FormsTable, FormsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormsWith applies the HasEdge predicate on the "forms" edge with a given conditions (other predicates).
func HasFormsWith(preds ...predicate.Form) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFormsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResponses applies the HasEdge predicate on the "responses" edge.
func HasResponses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResponsesWith applies the HasEdge predicate on the "responses" edge with a given conditions (other predicates).
func HasResponsesWith(preds ...predicate.Response) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newResponsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
