// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// Admin holds the value of the "admin" field.
	Admin bool `json:"admin,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Button/CTA color extracted from user's website
	BrandButtonColor string `json:"brand_button_color,omitempty"`
	// Main background/surface color extracted from user's website
	BrandBackgroundColor string `json:"brand_background_color,omitempty"`
	// Text color on buttons extracted from user's website
	BrandTextColor string `json:"brand_text_color,omitempty"`
	// Status of brand color extraction job
	BrandColorsStatus user.BrandColorsStatus `json:"brand_colors_status,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// User's preferred language for UI and communications
	Language user.Language `json:"language,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges                 UserEdges `json:"edges"`
	payment_customer_user *int
	selectValues          sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*PasswordToken `json:"owner,omitempty"`
	// PaymentCustomer holds the value of the payment_customer edge.
	PaymentCustomer *PaymentCustomer `json:"payment_customer,omitempty"`
	// Forms holds the value of the forms edge.
	Forms []*Form `json:"forms,omitempty"`
	// Responses holds the value of the responses edge.
	Responses []*Response `json:"responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnerOrErr() ([]*PasswordToken, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PaymentCustomerOrErr returns the PaymentCustomer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) PaymentCustomerOrErr() (*PaymentCustomer, error) {
	if e.PaymentCustomer != nil {
		return e.PaymentCustomer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: paymentcustomer.Label}
	}
	return nil, &NotLoadedError{edge: "payment_customer"}
}

// FormsOrErr returns the Forms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FormsOrErr() ([]*Form, error) {
	if e.loadedTypes[2] {
		return e.Forms, nil
	}
	return nil, &NotLoadedError{edge: "forms"}
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ResponsesOrErr() ([]*Response, error) {
	if e.loadedTypes[3] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldVerified, user.FieldAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldUsername, user.FieldCompanyName, user.FieldWebsite, user.FieldBrandButtonColor, user.FieldBrandBackgroundColor, user.FieldBrandTextColor, user.FieldBrandColorsStatus, user.FieldLogo, user.FieldLanguage:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // payment_customer_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				u.CompanyName = value.String
			}
		case user.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				u.Verified = value.Bool
			}
		case user.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				u.Admin = value.Bool
			}
		case user.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				u.Website = value.String
			}
		case user.FieldBrandButtonColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_button_color", values[i])
			} else if value.Valid {
				u.BrandButtonColor = value.String
			}
		case user.FieldBrandBackgroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_background_color", values[i])
			} else if value.Valid {
				u.BrandBackgroundColor = value.String
			}
		case user.FieldBrandTextColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_text_color", values[i])
			} else if value.Valid {
				u.BrandTextColor = value.String
			}
		case user.FieldBrandColorsStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_colors_status", values[i])
			} else if value.Valid {
				u.BrandColorsStatus = user.BrandColorsStatus(value.String)
			}
		case user.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				u.Logo = value.String
			}
		case user.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				u.Language = user.Language(value.String)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_customer_user", value)
			} else if value.Valid {
				u.payment_customer_user = new(int)
				*u.payment_customer_user = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the User entity.
func (u *User) QueryOwner() *PasswordTokenQuery {
	return NewUserClient(u.config).QueryOwner(u)
}

// QueryPaymentCustomer queries the "payment_customer" edge of the User entity.
func (u *User) QueryPaymentCustomer() *PaymentCustomerQuery {
	return NewUserClient(u.config).QueryPaymentCustomer(u)
}

// QueryForms queries the "forms" edge of the User entity.
func (u *User) QueryForms() *FormQuery {
	return NewUserClient(u.config).QueryForms(u)
}

// QueryResponses queries the "responses" edge of the User entity.
func (u *User) QueryResponses() *ResponseQuery {
	return NewUserClient(u.config).QueryResponses(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(u.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", u.Verified))
	builder.WriteString(", ")
	builder.WriteString("admin=")
	builder.WriteString(fmt.Sprintf("%v", u.Admin))
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(u.Website)
	builder.WriteString(", ")
	builder.WriteString("brand_button_color=")
	builder.WriteString(u.BrandButtonColor)
	builder.WriteString(", ")
	builder.WriteString("brand_background_color=")
	builder.WriteString(u.BrandBackgroundColor)
	builder.WriteString(", ")
	builder.WriteString("brand_text_color=")
	builder.WriteString(u.BrandTextColor)
	builder.WriteString(", ")
	builder.WriteString("brand_colors_status=")
	builder.WriteString(fmt.Sprintf("%v", u.BrandColorsStatus))
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(u.Logo)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fmt.Sprintf("%v", u.Language))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
