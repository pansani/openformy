// Code generated by ent, DO NOT EDIT.

package question

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPlaceholder holds the string denoting the placeholder field in the database.
	FieldPlaceholder = "placeholder"
	// FieldRequired holds the string denoting the required field in the database.
	FieldRequired = "required"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// FieldValidation holds the string denoting the validation field in the database.
	FieldValidation = "validation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeForm holds the string denoting the form edge name in mutations.
	EdgeForm = "form"
	// EdgeAnswers holds the string denoting the answers edge name in mutations.
	EdgeAnswers = "answers"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// FormTable is the table that holds the form relation/edge.
	FormTable = "questions"
	// FormInverseTable is the table name for the Form entity.
	// It exists in this package in order to avoid circular dependency with the "form" package.
	FormInverseTable = "forms"
	// FormColumn is the table column denoting the form relation/edge.
	FormColumn = "form_questions"
	// AnswersTable is the table that holds the answers relation/edge.
	AnswersTable = "answers"
	// AnswersInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswersInverseTable = "answers"
	// AnswersColumn is the table column denoting the answers relation/edge.
	AnswersColumn = "question_answers"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTitle,
	FieldDescription,
	FieldPlaceholder,
	FieldRequired,
	FieldOrder,
	FieldOptions,
	FieldValidation,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "questions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"form_questions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultRequired holds the default value on creation for the "required" field.
	DefaultRequired bool
	// DefaultOrder holds the default value on creation for the "order" field.
	DefaultOrder int
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeText is the default value of the Type enum.
const DefaultType = TypeText

// Type values.
const (
	TypeText          Type = "text"
	TypeShortText     Type = "short-text"
	TypeLongText      Type = "long-text"
	TypeEmail         Type = "email"
	TypeNumber        Type = "number"
	TypePhone         Type = "phone"
	TypeURL           Type = "url"
	TypeTextarea      Type = "textarea"
	TypeDate          Type = "date"
	TypeTime          Type = "time"
	TypeDateRange     Type = "date-range"
	TypeFile          Type = "file"
	TypeSignature     Type = "signature"
	TypeDropdown      Type = "dropdown"
	TypeRadio         Type = "radio"
	TypeCheckbox      Type = "checkbox"
	TypeMultiSelect   Type = "multi-select"
	TypePictureChoice Type = "picture-choice"
	TypeYesno         Type = "yesno"
	TypeRating        Type = "rating"
	TypeOpinionScale  Type = "opinion-scale"
	TypeRanking       Type = "ranking"
	TypeMatrix        Type = "matrix"
	TypeStatement     Type = "statement"
	TypeLegal         Type = "legal"
	TypeHidden        Type = "hidden"
	TypeMultiInput    Type = "multi-input"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeText, TypeShortText, TypeLongText, TypeEmail, TypeNumber, TypePhone, TypeURL, TypeTextarea, TypeDate, TypeTime, TypeDateRange, TypeFile, TypeSignature, TypeDropdown, TypeRadio, TypeCheckbox, TypeMultiSelect, TypePictureChoice, TypeYesno, TypeRating, TypeOpinionScale, TypeRanking, TypeMatrix, TypeStatement, TypeLegal, TypeHidden, TypeMultiInput:
		return nil
	default:
		return fmt.Errorf("question: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPlaceholder orders the results by the placeholder field.
func ByPlaceholder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlaceholder, opts...).ToFunc()
}

// ByRequired orders the results by the required field.
func ByRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequired, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFormField orders the results by form field.
func ByFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswersCount orders the results by answers count.
func ByAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswersStep(), opts...)
	}
}

// ByAnswers orders the results by answers terms.
func ByAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
	)
}
func newAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswersTable, AnswersColumn),
	)
}
